package br.com.nextel.order.service;

import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.nextel.customer.service.CustomerManager;
import com.nextel.customer.service.CustomerManagerService;
import com.nextel.customer.service.ws.types.Address;
import com.nextel.customer.service.ws.types.Customer;
import com.nextel.xml.ClienteType;

import br.com.nextel.order.dao.ClientDAO;
import br.com.nextel.order.exception.CreateOrderException;

@Service
public class CustomerServiceImpl implements CustomerService {
	
	
	@Value("${url.endpoint.customerwebservice}")
	private String endpoint;

	@Autowired
	ClientDAO clientDAO;

	
	@Override
	public ClienteType getCustomer(Long idCustomer) throws CreateOrderException {

		ClienteType cliente = new ClienteType();
	
		try {
			CustomerManagerService soapCustomer = new CustomerManagerService(new URL(endpoint));
			CustomerManager soapCustomerService = soapCustomer.getCustomerManagerSoapPort();
			if (soapCustomerService == null) {
				throw new CreateOrderException(String.format("Erro ao instanciar o Webservice CustomerManagerSoapPort endpoint[%s]", endpoint));
			}

			Customer customer = soapCustomerService.getCustomerByIdCustomer( idCustomer.intValue() );
			if (customer == null) {
				throw new CreateOrderException("Erro ao buscar cliente no Webservice CustomerManagerSoapPort ");
			}
			
			return loadCustomer(cliente, customer);
			
		}catch (Exception e) {
			throw new CreateOrderException(String.format("Nao foi possível recuperar informações do cliente erro: %s", (e.getMessage().replaceAll("\n|\r", "\\. ") + ";")), e);
		}		
	}

	@Override
	public ClienteType getCustomer(String cdCustomer) throws CreateOrderException {
		return getCustomer(clientDAO.getidCustomer(cdCustomer));
	}

	private ClienteType loadCustomer(ClienteType cliente, Customer customer) {
			if(customer != null) {
				List<Address> addressList = customer.getAddress().stream()
						.filter(c -> c.getCdContactReason() == 1 || c.getCdContactReason() == 4).collect(Collectors.toList());
		
				// Recupera endereço de faturamento caso nao exista endereço de entrega
				// cadastrado para o departamento do cliente
				Address address = addressList.stream().filter(c -> c.getCdContactReason() == 1).findAny().orElse(null);
				address = addressList.stream().filter(c -> c.getCdContactReason() == 4).findAny().orElse(address);
		
				if (address != null) {
					cliente.setClienteID(address.getIdCustomer());
					cliente.setClienteContatoID(address.getIdCustomerContact());
					if (customer != null && customer.getIdCustomerFamily() != null)
						cliente.setClienteFamiliaID(Long.valueOf(customer.getIdCustomerFamily()));
					SimpleDateFormat dtFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
					cliente.setDataHistorico(dtFormat.format(address.getDtHistory().toGregorianCalendar().getTime()));
					cliente.setEnderecoEntregaId(String.valueOf(address.getIdCustomerAddress()));
					cliente.setCodigoRazaoContato(address.getCdContactReason());
				
				cliente.setMercado(String.valueOf(customer.getCdMarket()));
				cliente.setDocumentoFiscal(customer.getCdFederalTax());
				cliente.setNome(customer.getNmCustomerMain());
				}
			}

			return cliente;
	}

}
